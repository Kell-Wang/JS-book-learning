//Date 2017/12/22.

/**
 *  Chapter 5 : 引用类型
 *
 *    引用类型的值(对象)是"引用类型"的一个实例。在 ECMAScript 中，"引用类型"是一种数据结构，
 *  用于将数据和功能组织在一起。它也常被称为"类"，但这种称呼并不妥当。尽管 ECMAScript 从技术上讲是一门
 *  面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引用类型有时候也被称为"对象定义"，
 *  因为他们描述的是一类对象所具有的属性和方法。
 *   【 对象是某个特定引用类型的实例 】，新对象是使用 new 操作符后跟一个"构造函数"来创建的。构造函数本身
 *  就是一个函数，只不过该函数是出于创建新对象的目的而定义的。 请看下面代码
 *      var person = new Object();
 *    这行代码创建了 Object 引用类型的一个新实例，然后把该实例保存在变量 person 中。使用的构造函数是 Object,
 *  它只为新对象定义了默认的属性和方法。
 *
 *  ECMAScript 提供了很多原生引用类型 (例如: Object)，以便开发人员用以实现常见的计算任务。
 *
 *  △：ECMAScript 中内置的原生引用类型
 *
 *      5.1    Object   类型
 *
 *      5.2    Array    类型
 *
 *      5.3    Date     类型
 *
 *      5.4    RegExp   类型
 *
 *      5.5    Function 类型
 *
 *      5.6    基本包装类型
 *          5.6.1  Boolean 类型
 *          5.6.2  Number  类型
 *          5.6.3  String  类型
 *
 *      5.7    单体内置对象
 *          5.7.1  Global  对象
 *          5.7.2  Math    对象
 *
 *
 *
 *
 * Chapter 6 : 面向对象的程序设计
 *
 *     面向对象(Object-Oriented，OO)的语言有一个标志，就是他们都有类的概念，而通过类可以创建任意多个具有
 *  相同属性和方法的对象。前面提到过，ECMAScript中没有类的概念，因此它的独享也与基于类的语言中的对象有所不同。
 *     ECMA-262把对象定义为: "无需属性的集合，其属性可以包含基本值、对象、或者函数"严格来讲，这就相当于说对象
 *  是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样（以及其他
 *  将要讨论的原因），我们可以把 ECMAScript 的对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。
 *  每个对象都是基于一个引用类型创建的，这个引用类型可以是第 5 章讨论的原生类型，也可以是开发人员定义的类型。
 *
 *  6.1: 理解对象
 *
 *  6.2: 创建对象
 *      虽然 "Object构造函数" 或 "对象字面量" 都可以来创建单个对象，但是这些方式有一个明显的缺点: 使用同一个
 *    接口创建了很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。工厂模式是软件
 *    工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程。。。。下面是js中用到的设计模式:

 *       6.2.1 工厂模式
 *       6.2.2 构造函数模式
 *       6.2.3 原型模式
 *       6.2.4 组合使用构造函数模式和原型模式
 *       6.2.5 动态原型模式
 *       6.2.6 寄生构造函数模式
 *       6.2.7 稳妥构造函数模式
 *
 */

// 6.1 创建对象的基本方式: 1. new Object()的实例  2. 对象字面量
var person = new Object();
person.name = 'Nicholas';
person.age = 29;
person.sayName = function () {
    console.log(this.name);
};

var person2 = {
    name: "Nicholas",
    age: 29,
    job: "Software Engineer",

    sayName: function () {
        console.log(this.name)
    }
}
