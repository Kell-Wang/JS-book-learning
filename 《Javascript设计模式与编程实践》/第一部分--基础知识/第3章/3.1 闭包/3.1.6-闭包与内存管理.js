/**
 * ### 3.1.6 闭包与内存管理
 * - 局部变量本来应该在函数退出的时候被解除引用，但如果局部变量被封闭在闭包形成的环境中，
 *   那么这个局部变量就会一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。
 *   使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这
 *   些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的，这里并不能说
 *   成是内存泄露。如果在将来需要回收这些变量，我们可以手动把这些变量设置为 null。
 * - 跟闭包和内训泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域链
 *   中保存着一些 DOM 节点，这时候就有可能造成内存泄露。但这本身并非闭包的问题，也并非 JS
 *   的问题。......
 * - 同样，如果要解决循环引用带来的内存泄露问题，我们只需要把循环应用中的变量设置为 null 
 *   即可。将变量设置为 null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次
 *   运行时，就会删除这些值并回收它们占用的内存。
 *
 */